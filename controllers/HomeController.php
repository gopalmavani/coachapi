<?php
/**
 * Created by PhpStorm.
 * User: Deepak
 * Date: 8/13/2018
 * Time: 2:28 PM
 */


namespace app\controllers;
use app\models\FriendsList;
use app\models\UsersLikes;
use Yii;
use yii\web\Controller;
use  yii\web\Request;
use yii\helpers\Json;
use yii\rest\ActiveController;
use yii\filters\auth\HttpBasicAuth;
use yii\web\HeaderCollection ;
use yii\web\Application;
use app\models\Users;
use app\models\UserInfo;

use app\models\DeviceLocation;
use yii\web\UploadedFile;

use yii\helpers\Url;

class HomeController extends ActiveController
{

    public $modelClass = 'app\models\Employee';
    // public $token = 'abc@1234'; //decrypted token
    public $token = '31528198109743225ff9d0cf04d1fdd1'; //md5 token encrypted

    public function beforeAction($action)
    {
        header('Access-Control-Allow-Origin: *');
        header('Content-type: application/json');
        if (isset(getallheaders()['Token']) && $this->token === getallheaders()['Token']) {
            return parent::beforeAction($action); // TODO: Change the autogenerated stub
        } else {
            http_response_code(401);
            echo Json::encode(array(
                "result" => false,
                "error" => "Unauthorized",
            ));
        }
    }

    //Registration Api As per Required Parameters.
    public function actionRegister()
    {
        $result = [];
        $request = JSON::decode(Yii::$app->request->getRawBody());
        if(!empty($request)){
            if(isset($request['registerType'])){
                $registerType = strtolower($request['registerType']);
                if(($registerType == "facebook" || $registerType == "email" || $registerType == "google" || $registerType == "insta" || $registerType == "linkedin")){
                    if(isset($request['userType'])){
                        $userType = strtolower($request['userType']);
                        if(($userType == "coach" || $userType == "user" )){
                            if(!empty($request['fullname'])){
                                if(!empty($request['email']) && !empty($request['password'])){
                                    $model = new UserInfo();
                                    $model->attributes = $request;
                                    if(!empty($request['socialId'])) { $model->social_id = $request['socialId'];}
                                    if(!empty($request['fullname'])) { $model->first_name = $request['fullname'];}
                                    if(!empty($request['focusArea'])) { $model->focus_areas = $request['focusArea'];}
                                    if(!empty($request['aboutme'])){ $model->about_user = $request['aboutme'];}
                                    $model->user_type = $request['userType'];
                                    $model->password = md5($request['password']);
                                    $model->date_of_registration = date('Y-m-d H:i:s');
                                    $model->created_date = date('Y-m-d H:i:s');
                                    $model->modified_date = date('Y-m-d H:i:s');
                                    //          MD5 hash for admin@123 is : e6e061838856bf47e1de730719fb2609
                                    //          $model->user_token = md5(uniqid($model->user_id, true));

                                    if ($model->save()) {
                                        $device = new DeviceLocation();
                                        if(isset($request['deviceId'])){
                                            $device->device_token = $request['deviceId'];
                                        }
                                        if(isset($request['latitude'])){
                                            $device->device_token = $request['latitude'];
                                        }
                                        if(isset($request['longitude'])){
                                            $device->device_token = $request['longitude'];
                                        }
//                                        $device->attributes = $request;
                                        $device->event = "register";
                                        $device->user_id = $model->user_id;
                                        $device->created_date = date('Y-m-d H:i:s');
                                        $device->modified_date = date('Y-m-d H:i:s');
                                        $device->save();
                                        $result = [
                                            "code" => 200,
                                            "message" => "success",
                                            "userId" => $model->user_id,
                                            //              "userToken" => $model->user_token,
                                        ];
                                    }else{

                                        $result = [
                                            "code" => 500,
                                            "message" =>  $request['email']." has already been taken. ",
//                                            "errors" => $request['email']." has already been taken. ",
                                        ];
                                    }

                                }else{
                                    $result = [
                                        "code" => 500,
                                        "message" => "email or password can not blank",
//                                        "error" => "Invalid email or password",
                                    ];
                                }
                            }else{
                                $result = [
                                    "code" => 500,
                                    "message" => "fullname cannot be blank",
//                                    "error" => "fullname cannot be blank",
                                ];
                            }

                        }else{
                            $result = [
                                "code" => 500,
                                "message" => "Invalid userType",
//                                "error" => "Invalid userType",
                            ];
                        }
                    }else{
                        $result = [
                            "code" => 500,
                            "message" => "userType not defined",
//                            "error" => "userType not defined",
                        ];
                    }
                }else{
                    $result = [
                        "code" => 500,
                        "message" => "Invalid registerType",
//                        "error" => "Invalid registerType",
                    ];
                }

            }else{
                $result = [
                    "code" => 500,
                    "message" => "registerType not defined",
//                    "error" => "registerType not defined",
                ];
            }
        }else{
            $result = [
                "code" => 500,
                "message" => "data not available",
//                "error" => "data not available",
            ];
        }
        echo JSON::encode($result);
    }

    //Login Api As per Required Parameters.
    public function actionLogin()
    {
        $result = [];
        $request = JSON::decode(Yii::$app->request->getRawBody());
        if(!empty($request)){
//            if(isset($request['userType'])){
//                $userType = strtolower($request['userType']);
//                if(($userType == "coach") || ($userType == "user")){
                    if(isset($request['deviceType'])){
                        $deviceType = strtolower($request['deviceType']);
                        if(($deviceType == "ios" )|| ($deviceType == "android")){
                            if(!empty($request['deviceId'])){
                                if (!empty($request['email']) && !empty($request['password'])) {
                                    $user = UserInfo::findOne(["email" => $request['email'], "password" => md5($request['password'])]);
                                    if (!empty($user)) {
                                        $user->last_logged_in = date('Y-m-d H:i:s');
                                        $user->save();
                                        $userDetails = [
                                            "userId"=>$user['user_id'],
                                            "userType"=>$user['user_type'],
                                            "fullname"=>$user['first_name'].' '.$user['last_name'],
                                            "email"=>$user['email'],
                                            "gender"=> $user->gender,
                                            "dob"=>$user->dob,
                                            "aboutme"=>$user->about_user,
                                            "goals"=>$user->goals,
                                            "focus_area"=>$user->focus_areas,
                                            "location"=>$user->location,
                                            "city"=>$user->city,
                                            "country"=>$user->country,
                                            "profession"=>$user->profession,
                                            "is_verified"=> $user->is_enabled,
                                            "user_profile_image" => $user->image
                                        ];

                                        $result = [
                                            "code" => 200,
                                            "status" => "success",
                                            "userDetails" => $userDetails,
                                        ];
                                    } else {
                                        $result = [
                                            "code" => 500,
                                            "message" => "Invalid user/Password",
//                                            "error" => "Invalid user/Password",
                                        ];
                                    }
                                } else {
                                    $result = [
                                        "code" => 500,
                                        "message" => "email and password required",
//                                        "error" => "email and password required",
                                    ];
                                }
                            }else{
                                $result = [
                                    "code" => 500,
                                    "message" => "deviceId not defined",
//                                    "error" => "deviceId not defined",
                                ];
                            }
                        }else{
                            $result = [
                                "code" => 500,
                                "message" => "Invalid deviceType",
//                                "error" => "Invalid deviceType",
                            ];
                        }
                    }else{
                        $result = [
                            "code" => 500,
                            "message" => "deviceType not defined",
//                            "error" => "deviceType not defined",
                        ];
                    }
//                }else{
//                    $result = [
//                        "code" => 500,
//                        "message" => "failed",
//                        "error" => "Invalid userType",
//                    ];
//                }
//            }else{
//                $result = [
//                    "code" => 500,
//                    "message" => "failed",
//                    "error" => "userType not defined",
//                ];
//            }
        }else{
            $result = [
                "code" => 500,
                "message" => "data not available",
//                "error" => "data not available",
            ];
        }
        echo JSON::encode($result);
    }

    //Social Login Api As per Required Parameters.

    public function actionSocialLogin()
    {
        $result = [];
        $request = JSON::decode(Yii::$app->request->getRawBody());
        if(!empty($request)){
            if(isset($request['loginType'])){
//                ($request['loginType'] == "facebook" || $request['loginType'] == "google" || $request['loginType'] == "insta" || $request['loginType'] == "linkedin")
                $loginType = strtolower($request['loginType']);
                if(($loginType == "facebook") || ($loginType == "email") || ($loginType == "google") || ($loginType == "insta") || ($loginType == "linkedin")){
                    if(isset($request['deviceType'])){
                        $deviceType = strtolower($request['deviceType']);
                        if(($deviceType == "ios" )|| ($deviceType == "android")){
                            if(!empty($request['deviceId'])){
                                if (!empty($request['email']) && !empty($request['socialId'])) {
                                    $user = UserInfo::findOne(["email" => $request['email'], "social_id"=>$request['socialId']]);
                                    if (!empty($user)) {
                                        $user->last_logged_in = date('Y-m-d H:i:s');
                                        $user->save();
                                        $userDetails = [
                                            "userId"=>$user['user_id'],
                                            "userType"=>$user['user_type'],
                                            "fullname"=>$user['first_name'].' '.$user['last_name'],
                                            "email"=>$user['email'],
                                            "gender"=> $user->gender,
                                            "dob"=>$user->dob,
                                            "aboutme"=>$user->about_user,
                                            "goals"=>$user->goals,
                                            "focus_area"=>$user->focus_areas,
                                            "location"=>$user->location,
                                            "city"=>$user->city,
                                            "country"=>$user->country,
                                            "profession"=>$user->profession,
                                            "is_verified"=> $user->is_enabled,
                                            "user_profile_image" => $user->image
                                        ];

                                        $result = [
                                            "code" => 200,
                                            "status" => "success",
//                        "userToken"=>$user->user_token,
                                            "userDetails" => $userDetails,
                                        ];
                                    } else {
                                        $result = [
                                            "code" => 500,
//                                            "message" => "Invalid user/socialId",
                                            "error" => "Invalid user/socialId",
                                        ];
                                    }
                                } else {
                                    $result = [
                                        "code" => 500,
//                                        "message" => "failed",
                                        "message" => "email and socialId required",
                                    ];
                                }
                            }else{
                                $result = [
                                    "code" => 500,
//                                    "message" => "failed",
                                    "message" => "deviceId not defined",
                                ];
                            }
                        }else{
                            $result = [
                                "code" => 500,
//                                "message" => "failed",
                                "message" => "Invalid deviceType",
                            ];
                        }
                    }else{
                        $result = [
                            "code" => 500,
//                            "message" => "failed",
                            "message" => "deviceType not defined",
                        ];
                    }
                }else{
                    $result = [
                        "code" => 500,
//                        "message" => "failed",
                        "message" => "Invalid loginType",
                    ];
                }
            }else{
                $result = [
                    "code" => 500,
//                    "message" => "failed",
                    "message" => "loginType not defined",
                ];
            }
        }else{
            $result = [
                "code" => 500,
//                "message" => "failed",
                "message" => "data not available",
            ];
        }
        echo JSON::encode($result);
    }


    //get splash Api As per Required Parameters.

    public function actionSplash()
    {
        $result = [];
        $request = JSON::decode(Yii::$app->request->getRawBody());
        $result = [
            "code" => "200",
            "splash" => "http://localhost/asd/img/influ.png",
        ];
        echo JSON::encode($result);
    }


    // update profile using id and update device location

    public function actionEditProfile(){
        $result = [];
        $headers = Yii::$app->request->headers;
        $id = $headers['user_id'];
        if(!empty($id)){
            $user = UserInfo::findOne(["user_id" => $id]);
            if(!empty($user)){
                $request = JSON::decode(Yii::$app->request->getRawBody());
                if(!empty($request)){
                    $user->attributes = $request;
                    if(!empty($request['socialId'])) { $user->social_id = $request['socialId'];}
                    if(!empty($request['fullname'])) { $user->first_name = $request['fullname'];}
                    if(!empty($request['focusArea'])) { $user->focus_areas = $request['focusArea'];}
                    if(!empty($request['aboutme'])){ $user->about_user = $request['aboutme'];}
                    $user->modified_date = date('Y-m-d H:i:s');
                    if($user->save()){
                        $device = DeviceLocation::findOne(["user_id" => $id]);
                        if(empty($device)){
                            $device = new DeviceLocation();
                            $device->attributes = $request;
                            $device->event = "register";
                            $device->user_id = $user->user_id;
                            $device->created_date = date('Y-m-d H:i:s');
                            $device->modified_date = date('Y-m-d H:i:s');
                            if($device->save()) {
                                $result = [
                                    "code" => 200,
                                    "message" => "success",
                                ];
                            }else{
                                $errors ='Error Occured,Please try again later';
                                if(isset($device->errors)){
                                    $errors = "";
                                    foreach ($device->errors as $key => $value){
                                        if($key == 'first_name'){
                                            $value[0] = 'Full Name cannot be blank.';
                                        }
                                        $errors .= $value[0]." and ";
                                    }
                                    $errors = rtrim($errors, ' and ');
                                    $errors = str_replace ('"', "", $errors);
                                }
                                $result = [
                                    "code" => 500,
                                    "message" => $errors,
                                ];
                            }
                        }else{
                            $device->event = "register";
                            $device->attributes = $request;
//                            $device->latitude = $request['latitude'];
//                            $device->longitude = $request['longitude'];
                            $device->created_date = date('Y-m-d H:i:s');
                            $device->modified_date = date('Y-m-d H:i:s');
                            if($device->save()) {
                                $result = [
                                    "code" => 200,
                                    "message" => "success",
                                ];
                            }else{
                                $errors ='Error Occured,Please try again later';
                                if(isset($device->errors)){
                                    $errors = "";
                                    foreach ($device->errors as $key => $value){
                                        if($key == 'first_name'){
                                            $value[0] = 'Full Name cannot be blank.';
                                        }
                                        $errors .= $value[0]." and ";
                                    }
                                    $errors = rtrim($errors, ' and ');
                                    $errors = str_replace ('"', "", $errors);
                                }
                                $result = [
                                    "code" => 500,
                                    "message" => $errors,
                                ];
                            }
                        }
                    }else{
                        $errors ='Error Occured,Please try again later';
                        if(isset($user->errors)){
                            $errors = "";
                            foreach ($user->errors as $key => $value){

                                if($key == 'first_name'){
                                    $value[0] = 'Full Name cannot be blank.';
                                }
                                $errors .= $value[0]." and ";
                            }
                            $errors = rtrim($errors, ' and ');
                            $errors = str_replace ('"', "", $errors);
                        }
                        $result = [
                            "code" => 500,
                            "message" => $errors,
                        ];
                    }
                }else{
                    $result = [
                        "code" => 500,
                        "message" => "data cannot be blank",
                    ];
                }
            }else{
                $result = [
                    "code" => 500,
                    "message" => "user not found",
                ];
            }
        }else{
            $result = [
                "code" => 500,
                "message" => "user id can not blank",
            ];
        }
        echo JSON::encode($result);
    }

    // update profile image

    public function actionUpdateProfileImage()
    {
        $result = [];
        $headers = Yii::$app->request->headers;
        $id = $headers['user_id'];
        if(!empty($id)){
            $model = UserInfo::findOne(["user_id" => $id]);
            if(!empty($model)){
                $image = UploadedFile::getInstancesByName('image');
                if(!empty($image)){
                    foreach ($image as $file){
                        $path = Yii::getAlias('@webroot').'/uploads/'.$file->name; //Generate your save file path here;
                        $file->saveAs($path); //Your uploaded file is saved, you can process it further from here
                        $model->image = $path;
                        if($model->save()){
                            $result = [
                                "code" => 200,
                                "message" => "success",
                            ];
                        }else{
                            $errors ='Error Occured,Please try again later';
                            if(isset($model->errors)){
                                $errors = "";
                                foreach ($model->errors as $key => $value){
                                    if($key == 'first_name'){
                                        $value[0] = 'Full Name cannot be blank.';
                                    }
                                    $errors .= $value[0]." and ";
                                }
                                $errors = rtrim($errors, ' and ');
                                $errors = str_replace ('"', "", $errors);
                            }
                            $result = [
                                "code" => 500,
                                "message" => $errors,
                            ];
//                            $result = [
//                                "code" => 500,
//                                "message" => "Error Occured,Please try again later",
////                                "errors" => [$model->errors],
//                            ];
                        }
                    }
                }else{
                    $result = [
                        "code" => 500,
                        "message" => "image not available",
                    ];
                }
            }else{
                $result = [
                    "code" => 500,
                    "message" => "user not found",
                ];
            }
        }else{
            $result = [
                "code" => 500,
                "message" => "user id can not blank",
            ];
        }
        echo JSON::encode($result);
    }

    //deactive account

    public function actionDeactiveAccount()
    {
        $result = [];
        $headers = Yii::$app->request->headers;
        $user_id = $headers['user_id'];
        if(!empty($user_id)){
            $model = UserInfo::findOne(["user_id" => $user_id]);
            if(!empty($model)){
                if($model->is_active == 0 ){
                    $result = [
                        "code" => 500,
//                        "message" => "failed",
                        "message" => "already deactive account",
                    ];
                }else{
                    $model->is_active = 0;
                    if($model->save()){
                        $result = [
                            "code" => 200,
                            "message" => "success",
                        ];
                    }else{
                        $errors ='Error Occured,Please try again later';
                        if(isset($model->errors)){
                            $errors = "";
                            foreach ($model->errors as $key => $value){

                                if($key == 'first_name'){
                                    $value[0] = 'Full Name cannot be blank.';
                                }
                                $errors .= $value[0]." and ";
                            }
                            $errors = rtrim($errors, ' and ');
                            $errors = str_replace ('"', "", $errors);
                        }
                        $result = [
                            "code" => 500,
//                            "message" => "failed",
                            "message" => $errors,
                        ];
                    }
                }
            }else{
                $result = [
                    "code" => 500,
                    "message" => "user not found",
                ];
            }
        }else{
            $result = [
                "code" => 500,
                "message" => "user id can not blank",
            ];
        }
        echo JSON::encode($result);
    }

    //update Location

    public function actionRegisterLocation()
    {
        $result = [];
        $headers = Yii::$app->request->headers;
        $user_id = $headers['user_id'];
        if(!empty($user_id)){
            $user = UserInfo::findOne(["user_id" => $user_id]);
            if(!empty($user)){
                $request = JSON::decode(Yii::$app->request->getRawBody());
                if(isset($request['latitude']) && isset($request['longitude']) && isset($request['deviceToken'])){
                    if(!empty($request['deviceToken'])){
                        if(!empty($request['latitude'])){
                            if(!empty($request['longitude'])){
                                $model = DeviceLocation::findOne(["user_id" => $user_id]);
                                if(empty($model)){
                                    $device = new DeviceLocation();
                                    $device->attributes = $request;
                                    $device->device_token = $request['deviceToken'];
                                    $device->user_id = $user_id;
                                    $device->event = "register";
                                    $device->created_date = date('Y-m-d H:i:s');
                                    $device->modified_date = date('Y-m-d H:i:s');
                                    if ($device->save()) {
                                        $result = [
                                            "code" => 200,
                                            "message" => "success",
                                        ];
                                    } else {
                                        $errors ='Error Occured,Please try again later';
                                        if(isset($device->errors)){
                                            $errors = "";
                                            foreach ($device->errors as $key => $value){

                                                if($key == 'first_name'){
                                                    $value[0] = 'Full Name cannot be blank.';
                                                }
                                                $errors .= $value[0]." and ";
                                            }
                                            $errors = rtrim($errors, ' and ');
                                            $errors = str_replace ('"', "", $errors);
                                        }
                                        $result = [
                                            "code" => 500,
//                                            "message" => "failed",
                                            "message" => $errors,
                                        ];
                                    }
                                }else{
                                    $model->attributes = $request;
                                    $model->user_id = $user_id;
                                    $model->event = "register";
                                    $model->device_token = $request['deviceToken'];
                                    $model->created_date = date('Y-m-d H:i:s');
                                    $model->modified_date = date('Y-m-d H:i:s');
                                    if ($model->save()) {
                                        $result = [
                                            "code" => 200,
                                            "message" => "success",
                                        ];
                                    } else {
                                        $errors ='Error Occured,Please try again later';
                                        if(isset($model->errors)){
                                            $errors = "";
                                            foreach ($model->errors as $key => $value){

                                                if($key == 'first_name'){
                                                    $value[0] = 'Full Name cannot be blank.';
                                                }
                                                $errors .= $value[0]." and ";
                                            }
                                            $errors = rtrim($errors, ' and ');
                                            $errors = str_replace ('"', "", $errors);
                                        }
                                        $result = [
                                            "code" => 500,
//                                            "message" => "failed",
                                            "message" => $errors,
                                        ];
                                    }
                                }
                            }else{
                                $result = [
                                    "code" => 500,
                                    "message" => "longitude can not blank",
                                ];
                            }
                        }else{
                            $result = [
                                "code" => 500,
                                "message" => "latitude can not blank",
                            ];
                        }
                    }else{
                        $result = [
                            "code" => 500,
                            "message" => "deviceToken can not blank",
                        ];
                    }
                }else{
                    $result = [
                        "code" => 500,
                        "message" => "data can not blank",
                    ];
                }
            }else{
                $result = [
                    "code" => 500,
//                    "message" => "failed",
                    "message" => "user not found",
                ];
            }
        }else{
            $result = [
                "code" => 500,
//                "message" => "failed",
                "message" => "user id can not blank",
            ];
        }

        echo JSON::encode($result);
    }

    //forget password for the reser password

    public function actionForgetPassword()
    {
        $result = [];
        $request = JSON::decode(Yii::$app->request->getRawBody());
        if (!empty($request['emailId'])) {
            $user = UserInfo::findOne(["email" => $request['emailId']]);
            $url = "http://scrumwheel.com".Yii::$app->urlManager->createUrl("users/resetpassword/".$user["user_id"]);

            if (!empty($user)) {
                $to = $user['email'];
                $subject = "user password reset";
                $headers = "MIME-Version: 1.0" . "\r\n";
                $headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";
                $headers .= "From: support@coach.in" . "\r\n";
                $message = '
                        <html>
                            <body>
                                <table style="margin:50px auto;width:500px;">
                                    <thead>
                                        <tr>
                                            <td><h2>CoachApi</h2></td>
                                        </tr>
                                        <tr><p>Reset password Details</p></tr>
                                    </thead>
                                    <tbody>
                                        <tr width="100%">
                                           <td><h4>password reset link <a href="'.$url.'" target="_blank">click here</a></h4></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </body>
                        </html>';

                if(mail($to, $subject, $message, $headers)){
                    $result = [
                        "code" => 200,
                        "message" => "success",
                    ];
                }else{
                    $result = [
                        "code" => 500,
                        "message" => "failed",
                    ];
                }
            }else{
                $result = [
                    "code" => 500,
                    "message" => "user not found",
                ];
            }
        }else{
            $result = [
                "code" => 500,
                "message" => "emailId can not blank",
            ];
        }
        echo JSON::encode($result);
    }

    //search api from user name parameters

    public function actionSearch()
    {
        $result = [];
        $headers = Yii::$app->request->headers;
        $user_id = $headers['user_id'];
        if(!empty($user_id)){
            $user = UserInfo::findOne(["user_id" => $user_id]);
            if(!empty($user)){
                $request = JSON::decode(Yii::$app->request->getRawBody());
                if(!empty($request['searchKey'])){
                    $userData = UserInfo::find()->select(['user_id','first_name','image','location','city','country','about_user','likes_count','is_active'])->where(["like","first_name" ,$request['searchKey']])->all();
                    if($userData){
                        $data = [];

                        foreach ($userData as $usersInfo){
                            $liked = UsersLikes::find()->where(['user_id' => $user_id,'like_user_id' =>$usersInfo['user_id']])->one();
                            $like = 0;
                            if($liked) {
                                $like = 1;
                            }
                            $friend = FriendsList::find()->select('status')->where(['user_id'=>$user_id,'friend_user_id' => $usersInfo['user_id']])->one();
                            $frnds = 0;
                            if($friend){
                               if($friend->status == 1){
                                   $frnds = 1;
                               }
                            }
                            array_push($data,array(
                                "userId"=>$usersInfo['user_id'],
                                "userName"=>$usersInfo['first_name'],
                                "userImage"=>$usersInfo['image'],
                                "location"=>$usersInfo['location'],
                                "city"=>$usersInfo['city'],
                                "country"=>$usersInfo['country'],
                                "aboutme"=>$usersInfo['about_user'],
                                "is_coach"=>$usersInfo['is_active'],
                                "is_like"=> $like,
                                "is_friend"=>$frnds,
                            ));
                        }
                        $result = [
                            "code" => 200,
                            "message" => "message",
                            "userData"=>$data
                        ];
                    }else{
                        $result = [
                            "code" => 200,
                            "message"=>"message",
                            "userData" => [],
                        ];
                    }

                }else{
                    $result = [
                        "code" => 500,
//                        "message"=>"failed",
                        "message" => "searchKey cannot blank",
                    ];
                }
            }else{
                $result = [
                    "code" => 500,
//                    "message"=>"failed",
                    "message" => "user not found",
                ];
            }
        }else{
            $result = [
                "code" => 500,
//                "message"=>"failed",
                "message" => "user id can not blank",
            ];
        }
        echo JSON::encode($result);
    }

    /*
     * for the user can like and dislike users of others
     */
    public function actionLikeProfile()
    {
        $result = [];
        $headers = Yii::$app->request->headers;
        $user_id = $headers['user_id'];
        if(!empty($user_id)){
            $user = UserInfo::findOne(["user_id" => $user_id]);
            if(!empty($user)){
                $request = JSON::decode(Yii::$app->request->getRawBody());
                if(!empty($request['user_id'])){
                    $Likeuser = UserInfo::findOne(["user_id" => $request['user_id']]);
                    if($Likeuser){
                        $usersLikes = UsersLikes::find()->where(['user_id'=>$user_id,"like_user_id"=>$request['user_id']])->one();
                        if(empty($usersLikes)){
                            $model = new UsersLikes();
                            $model->attributes = $request;
                            $model->like_user_id = $request['user_id'];
                            $model->user_id = $user_id;
                            $model->created_date = date('Y-m-d H:i:s');
                            $model->modified_date = date('Y-m-d H:i:s');
                            if($model->save()){
                                if(empty($Likeuser->likes_count)){
                                    $likes = 0;
                                }else{
                                    $likes = $Likeuser->likes_count;
                                }
                                $Likeuser->likes_count = $likes + 1;
                                if($Likeuser->save()){

                                    $result = [
                                        "code" => 200,
                                        "message" => "Liked Successfully",
                                    ];
                                }else{
                                    $errors ='Error Occured,Please try again later';
                                    if(isset($Likeuser->errors)){
                                        $errors = "";
                                        foreach ($Likeuser->errors as $key => $value){
                                            if($key == 'first_name'){
                                                $value[0] = 'Full Name cannot be blank.';
                                            }
                                            $errors .= $value[0]." and ";
                                        }
                                        $errors = rtrim($errors, ' and ');
                                        $errors = str_replace ('"', "", $errors);
                                    }
                                    $result = [
                                        "code" => 500,
                                        "message" => $errors,
//                                        "error"=> [$Posts->errors],
                                    ];
                                }
                            }else{
                                $result = [
                                    "code" => 500,
                                    "message" => "failed",
                                ];
                            }
                        }else{
                            if($usersLikes->delete()){
                                if(empty($Likeuser->likes_count)){
                                    $likes = 0;
                                }else{
                                    $likes = $Likeuser->likes_count;
                                }
                                $Likeuser->likes_count = $likes - 1;
                                    if($Likeuser->save()){
                                        $result = [
                                            "code" => 200,
                                            "message" => "Disliked Successfully",
                                        ];
                                    }else{
                                        $errors ='Error Occured,Please try again later';
                                        if(isset($Likeuser->errors)){
                                            $errors = "";
                                            foreach ($Likeuser->errors as $key => $value){
                                                if($key == 'first_name'){
                                                    $value[0] = 'Full Name cannot be blank.';
                                                }
                                                $errors .= $value[0]." and ";
                                            }
                                            $errors = rtrim($errors, ' and ');
                                            $errors = str_replace ('"', "", $errors);
                                        }
                                        $result = [
                                            "code" => 500,
                                            "message" => $errors,
                                        ];
                                    }
                                }else{
                                    $result = [
                                        "code" => 500,
                                        "message" => "failed",
                                    ];
                                }
                        }
                    }else{
                        $result = [
                            "code" => 500,
//                        "message"=>"failed",
                            "message" => "like user not found",
                        ];
                    }
                }else{
                    $result = [
                        "code" => 500,
//                        "message"=>"failed",
                        "message" => "user_id cannot blank",
                    ];
                }
            }else{
                $result = [
                    "code" => 500,
//                    "message"=>"failed",
                    "message" => "user not found",
                ];
            }
        }else{
            $result = [
                "code" => 500,
//                "message"=>"failed",
                "message" => "user id can not blank",
            ];
        }
        echo JSON::encode($result);
    }
}