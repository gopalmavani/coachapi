<?php
namespace app\controllers;
use Yii;
use yii\web\Controller;
use  yii\web\Request;
use yii\helpers\Json;
use yii\rest\ActiveController;
use yii\filters\auth\HttpBasicAuth;
use yii\web\HeaderCollection ;
use yii\web\Application;
use app\models\GroupInfo;
use app\models\UserInfo;
use app\models\FriendsList;
use app\models\GroupMapping;
use app\models\DeviceLocation;
use yii\web\UploadedFile;
use app\models\UsersLikes;

class FriendController extends ActiveController
{
    public $modelClass = 'app\models\Employee';
    // public $token = 'abc@1234'; //decrypted token
    public $token = '31528198109743225ff9d0cf04d1fdd1'; //md5 token encrypted

    public function beforeAction($action)
    {
        header('Access-Control-Allow-Origin: *');
        header('Content-type: application/json');
        if (isset(getallheaders()['Token']) && $this->token === getallheaders()['Token']) {
            return parent::beforeAction($action); // TODO: Change the autogenerated stub
        } else {
            http_response_code(401);
            echo Json::encode(array(
                "result" => false,
                "error" => "Unauthorized",
            ));
        }
    }

    //Suggested friend list display

    public function actionSuggestedFriendList()
    {
        $result = [];
        $headers = Yii::$app->request->headers;
        $user_id = $headers['user_id'];
        if(!empty($user_id)){
            $users =  UserInfo::findOne($user_id);
            if($users) {
                $request = JSON::decode(Yii::$app->request->getRawBody());
                if(!empty($request['latitude']) && !empty($request['longitude'])){
                    $latitude = $request['latitude'];
                    $longitude = $request['longitude'];
                    $connection = Yii::$app->getDb();
                    //example sql
                    // SELECT device_id,user_id, ( 3959 * acos( cos( radians(23.0168) ) * cos( radians( latitude ) ) * cos( radians( longitude ) - radians(72.5003) ) + sin( radians(23.0168) ) * sin( radians( latitude ) ) ) ) AS distance FROM device_location HAVING distance < 25 ORDER BY distance LIMIT 0 , 20;
                    // there are distance in miles so .
                    // 1 kilometer is equal to 0.62137119 miles .
                    // so  5 kilometer is equal to 3.1068559612 miles .
                    $command = $connection->createCommand("SELECT user_id, ( 3959 * acos( cos( radians($latitude) ) * cos( radians( latitude ) ) * cos( radians( longitude ) - radians($longitude) ) + sin( radians($latitude) ) * sin( radians( latitude ) ) ) ) AS distance FROM device_location HAVING distance < 3.1068559612 ORDER BY distance");
                    $result = $command->queryAll();
                    if(!empty($result)){
                        $SuggestedFriends = [];
                        foreach ($result as $userSuggest){
                            $model = UserInfo::findOne($userSuggest['user_id']);
                            if($model['user_id'] == $user_id){
                            }else{
                                array_push($SuggestedFriends,array(
                                    "user_id "=> $model['user_id'],
                                    "fullname" => $model['first_name'],
                                    "email" => $model['email'],
                                    "location" => $model['location'],
                                    "aboutme" => $model['about_user'],
                                    "user_profile_image" => $model['image']
                                ));
                            }
                        }
                        $result = [
                            "code" => 200,
                            "message" => "success",
                            "userData" => $SuggestedFriends,
                        ];
                    }else{
                        $result = [
                            "code" => 200,
                            "message" => "success",
                            "userData" => [],
                        ];
                    }
                }else{
                    $result = [
                        "code" => 500,
//                        "message" => "failed",
                        "message"=> "latitude or longtitude can not blank"
                    ];
                }
            }else{
                $result = [
                    "code" => 500,
//                    "message" => "failed",
                    "message"=> "user not found"
                ];
            }
        }else{
            $result = [
                "code" => 500,
//                "message" => "failed",
                "message"=> "user id can not blank"
            ];
        }
        echo JSON::encode($result);
    }

    //add friend Request

    public function actionAddFriendRequest()
    {
        $result = [];
        $headers = Yii::$app->request->headers;
        $user_id = $headers['user_id'];
        if(!empty($user_id)){
            $users =  UserInfo::findOne($user_id);
            if($users){
                $request = JSON::decode(Yii::$app->request->getRawBody());
                if(!empty($request)){
                    $request_id = $request['friend_user_id'];
                    if(!empty($request_id)){
                        $friend = FriendsList::findOne(["friend_user_id"=>$request_id,"user_id"=>$user_id]);
                        $user = UserInfo::findOne(["user_id"=>$request_id]);
                        if(!empty($user)){
                            if(empty($friend)){
                                $model = new FriendsList();
                                $model->friend_user_id = $request_id;
                                $model->user_id = $user_id;
                                if($model->save()){
                                    $result = [
                                        "code" => 200,
                                        "status" => "success",
                                        "friend_request_id" => $model->friend_list_id,
                                    ];
                                }else{
                                    $result = [
                                        "code" => 500,
                                        "message" => "failed",
                                        "error"=> $model->errors,
                                    ];
                                }
                            }else{
                                if($friend->status == 1){
                                   $msg =  "Unfriend request successfully";
                                }else{
                                    $msg =  "cancel request successfully";
                                }
                                if($friend->delete()){
                                    $result = [
                                        "code" => 200,
                                        "status" => "success",
                                        "message" => $msg
                                    ];
                                }else{
                                    $result = [
                                        "code" => 500,
                                        "message" => "Error occuerd please try again later.",
                                    ];
                                }
                            }
                        }else{
                            $result = [
                                "code" => 500,
                                "message" => "requested friend is not found",
                            ];
                        }
                    }else{
                        $result = [
                            "code" => 500,
                            "message" => "request id not found",
                        ];
                    }
                }else{
                    $result = [
                        "code" => 500,
                        "message" => "friend_user_id can not blank",
                    ];
                }
            }else{
                $result = [
                    "code" => 500,
                    "message" => "user not found",
                ];
            }
        }else{
            $result = [
                "code" => 500,
                "message" => "user id can not blank",
            ];
        }
        echo JSON::encode($result);
    }

    //accept friend Request

    public function actionAcceptFriendRequest()
    {
        $result = [];
        $headers = Yii::$app->request->headers;
        $user_id = $headers['user_id'];
        if(!empty($user_id)){
            $users =  UserInfo::findOne($user_id);
            if($users){
                $request = JSON::decode(Yii::$app->request->getRawBody());
                if(isset($request['friend_request_id'])){
                    if(isset($request['status'])){
                        $response_id = $request['friend_request_id'];
                        $friend = FriendsList::findOne(["friend_list_id"=>$response_id,"friend_user_id"=>$user_id]);
                        if(!empty($friend)){
                            $friend->status = $request['status'];
                            if($friend->save()){
                                $result = [
                                    "code" => 200,
                                    "status" => "success",
                                ];
                            }else{
                                $result = [
                                    "code" => 500,
                                    "message" => "failed",
                                    "error"=>$friend->errors,
                                ];
                            }
                        }else{
                            $result = [
                                "code" => 500,
                                "message" => "request not found",
                            ];
                        }
                    }else{
                        $result = [
                            "code" => 500,
                            "message" => "status can not blank",
                        ];
                    }
                }else{
                    $result = [
                        "code" => 500,
                        "message" => "friend_request_id can not blank",
                    ];
                }
            }else{
                $result = [
                    "code" => 500,
                    "message" => "user not found",
                ];
            }
        }else{
            $result = [
                "code" => 500,
                "message" => "user id can not blank",
            ];
        }
        echo JSON::encode($result);
    }

    //get friend list of api

    public function actionGetFriend()
    {
        $result = [];
        $headers = Yii::$app->request->headers;
        $user_id = $headers['user_id'];
        if(!empty($user_id)){
            $users =  UserInfo::findOne($user_id);
            if($users){
                $request = JSON::decode(Yii::$app->request->getRawBody());
                if(isset($request['user_id'])){
                    $friendsUser = UserInfo::findOne($request['user_id']);
                    if($friendsUser){

                        $friend = FriendsList::find()->select('status,friend_user_id')->where(['user_id'=> $request['user_id'],'status'=>1])->all();
                        $data = [];
                        foreach ($friend as $value){
                            $liked = UsersLikes::find()->where(['user_id' => $user_id,'like_user_id' =>$value['friend_user_id']])->one();
                            $like = 0;
                            if($liked) {
                                $like = 1;
                            }
                            $frnds = 0;
                            $friendofUser = FriendsList::find()->select('status')->where(['user_id'=> $user_id,'friend_user_id'=>$value['friend_user_id']])->one();
                            if($friendofUser){
                                if($friendofUser->status == 1){
                                    $frnds = 1;
                                }else if($friendofUser->status == 0){
                                    $frnds = 2;
                                }
                            }
                            $fUser = UserInfo::findOne($value['friend_user_id']);
                            array_push($data,array(
                                "user_id"=>$fUser['user_id'],
                                "userName"=>$fUser['first_name'],
                                "userImage"=>$fUser['image'],
                                "location"=>$fUser['location'],
                                "city"=>$fUser['city'],
                                "country"=>$fUser['country'],
                                "about"=>$fUser['about_user'],
                                "is_coach"=>$fUser['is_active'],
                                "is_like"=> $like,
                                "is_friend"=>$frnds,
                                ));
                        }

                        $result = [
                            "code" => 200,
                            "message" => "success",
                            "userData"=> $data
                        ];
                    }else{
                        $result = [
                            "code" => 500,
                            "message" => "friend not found",
                        ];
                    }
                }else{
                    $result = [
                        "code" => 500,
                        "message" => "friend user id can not blank",
                    ];
                }
            }else{
                $result = [
                    "code" => 500,
                    "message" => "user not found",
                ];
            }
        }else{
            $result = [
                "code" => 500,
                "message" => "user id can not blank",
            ];
        }
        echo JSON::encode($result);
    }

    /*
     * pending Request of user
     */

    public function actionPendingFriendRequest()
    {
        $result = [];
        $headers = Yii::$app->request->headers;
        $user_id = $headers['user_id'];
        if(!empty($user_id)){
            $users =  UserInfo::findOne($user_id);
            if($users){
                $friendOfUser = FriendsList::find()->select('friend_list_id,user_id,status,friend_user_id')->where(['user_id'=> $user_id,'status'=>0])->all();
                $userdata = [];
                foreach ($friendOfUser as $value){

                    $userLike = UsersLikes::find()->where(['user_id'=>$user_id,'like_user_id'=>$value->friend_user_id])->one();

                    $like = 0;
                    if($userLike) {
                        $like = 1;
                    }
                    $userInfo =  UserInfo::findOne($value->friend_user_id);
                    array_push($userdata,array(
                        "userId"=>$userInfo['user_id'],
                        "userName"=>$userInfo['first_name'],
                        "userImage"=>$userInfo['image'],
                        "location"=>$userInfo['location'],
                        "city"=>$userInfo['city'],
                        "country"=>$userInfo['country'],
                        "aboutme"=>$userInfo['about_user'],
                        "friend_request_id"=>$value->friend_list_id,
                        "is_coach"=>$userInfo['is_active'],
                        "is_like"=> $like,
                    ));
                }
                $result = [
                    "code" => 200,
                    "message" => "success",
                    "userData"=>$userdata
                ];
            }else{
                $result = [
                    "code" => 500,
                    "message" => "user not found",
                ];
            }
        }else{
            $result = [
                "code" => 500,
                "message" => "user id can not blank",
            ];
        }
        echo JSON::encode($result);
    }

}